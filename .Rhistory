geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
scale_x_discrete(breaks = c(1960:2015))+
theme_economist()
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist()
library(ggplot2)
library(ggthemes)
library(lubridate)
deficit <- read.csv("deficit.csv")
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist()
deficit.acf <- acf(deficit$Percent, plot = FALSE)
deficit.acf.df <- data.frame(deficit.acf$lag, deficit.acf$acf)
ggplot(deficit.acf.df, aes(x = deficit.acf.lag, y = deficit.acf.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist()
ggplot(deficit.acf.df, aes(x = deficit.acf.lag, y = deficit.acf.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist_white()
library(ggplot2)
library(ggthemes)
library(lubridate)
deficit <- read.csv("deficit.csv")
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist_white()
deficit.acf <- acf(deficit$Percent, plot = FALSE)
deficit.acf.df <- data.frame(deficit.acf$lag, deficit.acf$acf)
ggplot(deficit.acf.df, aes(x = deficit.acf.lag, y = deficit.acf.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
secondACF <- ggplot(deficit.acf.last.df, aes(x = deficit.acf.last.lag, y = deficit.acf.last.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
deficit.acf.last <- acf(deficit$Percent[28:54], plot = FALSE)
deficit.acf.last.df <- data.frame(deficit.acf.last$lag, deficit.acf.last$acf)
secondACF <- ggplot(deficit.acf.last.df, aes(x = deficit.acf.last.lag, y = deficit.acf.last.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
grid.arrange(firstACF, secondACF, nrow = 1)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(firstACF, secondACF, nrow = 1)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(gridExtra)
deficit <- read.csv("deficit.csv")
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist_white()
deficit.acf <- acf(deficit$Percent, plot = FALSE)
deficit.acf.df <- data.frame(deficit.acf$lag, deficit.acf$acf)
ggplot(deficit.acf.df, aes(x = deficit.acf.lag, y = deficit.acf.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
deficit.acf.first <- acf(deficit$Percent[0,27], plot = FALSE)
deficit.acf.first <- acf(deficit$Percent[0:27], plot = FALSE)
deficit.acf.df.first <- data.frame(deficit.acf.first$lag, deficit.acf.first$acf)
firstACF <- ggplot(deficit.acf.df, aes(x = deficit.acf.first.lag, y = deficit.acf.first.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
grid.arrange(firstACF, secondACF, nrow = 1)
firstACF
firstACF
secondACF
firstACF <- ggplot(deficit.acf.df, aes(x = deficit.acf.first.lag, y = deficit.acf.first.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
firstACF
deficit.acf.df.first <- data.frame(deficit.acf.first$lag, deficit.acf.first$acf)
firstACF <- ggplot(deficit.acf.df.first, aes(x = deficit.acf.first.lag, y = deficit.acf.first.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
firstACF
secondACF
max(deficit$Date)
tail(deficit$Date)
head(deficit$Date)
mean(deficit$Date)
mean(deficit$Percent)
head(deficit$Percent)
tail(deficit$Percent)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(gridExtra)
#Read the data in
deficit <- read.csv("deficit.csv")
#plot the time series by year
#The data comes with a 'date', but all dates are Dec 31, so strip the days for readability
ggplot(deficit, aes(x = year(Date), y = Percent))+
geom_line()+
geom_point()+
xlab("Year")+
ggtitle("US Trade Deficit with the EU by Year")+
theme_economist_white()
#plot the autocorrelation of the series
deficit.acf <- acf(deficit$Percent, plot = FALSE)
#extract the lag and ACF from the acf object
deficit.acf.df <- data.frame(deficit.acf$lag, deficit.acf$acf)
ggplot(deficit.acf.df, aes(x = deficit.acf.lag, y = deficit.acf.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
#Same as above, but for half of the data each, to evaluate
#if the data has consistent ACF across the series
deficit.acf.first <- acf(deficit$Percent[0:27], plot = FALSE)
deficit.acf.df.first <- data.frame(deficit.acf.first$lag, deficit.acf.first$acf)
firstACF <- ggplot(deficit.acf.df.first, aes(x = deficit.acf.first.lag, y = deficit.acf.first.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
deficit.acf.last <- acf(deficit$Percent[28:54], plot = FALSE)
deficit.acf.last.df <- data.frame(deficit.acf.last$lag, deficit.acf.last$acf)
secondACF <- ggplot(deficit.acf.last.df, aes(x = deficit.acf.last.lag, y = deficit.acf.last.acf))+
geom_bar(stat = 'identity', width = 0.5)+
labs(title = "Autocorrelation Plot", x = "Lag", y = "Autocorrelation Coefficient")+
theme_economist_white()
grid.arrange(firstACF, secondACF, nrow = 1)
library(tswge)
parzen.wge(deficit)
?parzen.wge
parzen.wge(deficit$Percent)
parzen.wge(deficit$Percent, trunc = 40)
parzen.wge(deficit$Percent)
parzen.wge(deficit$Percent, trunc = 20)
plotts.true.wge(phi = c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
library(tswge)
plotts.true.wge(phi = c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
plotts.true.wge(phi = c(0.1529, 0.0988, 0.0059, -0.0075, 0.0538, 0.1118, 0.5717, 0.0034, -0.0382 ))
plotts.true.wge(phi = c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
#Walmart Store 8Item 1 Filtering / spectral analysis / AR(3)
# Read in the data
Walmart = read.csv(file.choose(),header = TRUE)
# Load the Data
Stor8Item1 = Walmart %>% filter(item == 1 & store == 8)
library(tidyverse)
# Load the Data
Stor8Item1 = Walmart %>% filter(item == 1 & store == 8)
# Load the Data
Stor50Item9 = Walmart %>% filter(item == 50 & store == 9)
parzen.wge(Stor50Item9)
parzen.wge(Stor50Item9$sales)
plotts.true.wge(phi = c(0.1516, 0.0769, 0.0016, -0.0095, 0.0542, 0.1117, 0.5683))
library(tswge)
plotts.true.wge(theta = c(-.1, .3))
plotts.true.wge(theta = c(-.7))
plotts.true.wge(theta = c(-.1, .3))
factor.wge(phi = c(-.1, .3))
factor.wge(phi = c(-.1, -.82, .16))
plotts.true.wge(phi = c(.1, -.5, .7), theta = c(.72, -.8))
psi.weights.wge(phi = c(1.95, -1.9))
psi.weights.wge(phi = c(1.95, -1.9), lag.max = 2)
psi.weights.wge(phi = c(1.95, -1.9), lag.max = 4)
''
ts = c(5,9,13,15,14,10,12,17,20,25)
library(tswge)
acf(ts)
acf(ts)[7]
fore.arma.wge(ts, phi = c(1.65, -1.06, .262), limits = FALSE)
factor.wge(phi = c(1.65, -1.06, .262))
true.arma.aut.wge(phi = -.5)
true.arma.aut.wge(phi = c(1.65, -1.06, .262))
true.arma.spec.wge(phi = c(1.65, -1.06, .262))
true.arma.aut.wge(theta = c(1.65, -1.06, .262))
true.arma.spec.wge(theta = c(1.65, -1.06, .262))
true.arma.aut.wge(phi = c(1.65, -1.06, .262))
true.arma.aut.wge(theta = c(1.65, -1.06, .262))
true.arma.aut.wge(theta = c(1.65, -1.06, .262, .2, .3))
ts2 <- gen.arima.wge(20, d=1)
parzen.wge(ts2)
true.arma.spec.wge(phi = c(1.65, -1.06, .262)
)
factor.wge((phi = c(1.65, -1.06, .262))
)
reverse(ts)
ts.reverse()
ts
fore.arma.wge(ts, phi = c(1.65, -1.06, .262), limits = FALSE)
mean(ts)
1.65(25) - 1.06(20) + .262(17) + 14(1.65-1.06+.262)
1.65*(25) - 1.06*(20) + .262*(17) + 14*(1.65-1.06+.262)
1.65*(25) - 1.06*(20) + .262*(17) - 14*(1.65-1.06+.262)
1.65*(25) - 1.06*(20) + .262*(17) - 14*(1-1.65+1.06-.262)
1.65*(25) - 1.06*(20) + .262*(17) - 14*(1-1.65+1.06-.262)
fore.arma.wge(ts, phi = c(1.65, -1.06, .262), limits = FALSE)
fore.arma.wge(ts, phi = c(1.65, -1.06, .262), limits = FALSE)
fore.arma.wge(ts, phi = c(1.65, -1.06, .262), limits = TRUE, n.ahead = 4)
1.65*(25) - 1.06*(20) + .262*(17) + 14*(1-1.65+1.06-.262)
1.65*(26.576) - 1.06*(25) + .262*(20) + 14*(1-1.65+1.06-.262)
-0.231*27.697
var(ts)
psi.weights.wge(ts)
psi.weights.wge(ts, lag.max = 7)
psi.weights.wge(ts, lag.max = 3)
26.576 + 1.96 * sqrt(27.697)*sqrt(1 + 5^2)
26.576 + 1.96 * sqrt(27.697)*sqrt(5^2)
26.576 + 1.96 * sqrt(5^2)
26.576 + 1.96 * sqrt(27.697)*sqrt(1.65^2)
26.576 + 1.96 * sqrt(7.908)*sqrt(1.65^2)
26.576 + 1.96 * sqrt(7.908242)*sqrt(1.65^2)
26.576 + 1.96 * sqrt(7.908242)*sqrt(1.65^2)
26.576 - 1.96 * sqrt(7.908242)*sqrt(1.65^2)
24.6624 - 1.96 * sqrt(7.908242)*sqrt(1.65^2 + 1.6625^2)
24.6624 + 1.96 * sqrt(7.908242)*sqrt(1.65^2 + 1.6625^2)
?ar
library(tswge)
est.ar.wge(ts, type = 'burg')
est <- est.ar.wge(ts, type = 'burg')
est$phi
data('lakehuron')
data('LakeHuron')
lake <- LakeHuron
aic5.wge(lake)
plotts.sample.wge(lake)
describe(LakeHuron)
est <- est.arma.wge(lake, p = 1, q = 1)
est
est.arma.wge(phi = est$phi, q = est$'')
fore.arma.wge(phi = est$phi, q = est$theta, n.ahead = 10, n.ahead = T)
fore.arma.wge(lake, phi = est$phi, q = est$theta, n.ahead = 10, n.ahead = T)
fore.arma.wge(lake, phi = est$phi, q = est$theta, n.ahead = 10, lastn = T)
est$theta
fore.arma.wge(lake, phi = est$phi, theta = est$theta, n.ahead = 10, lastn = T)
diffLake <- artrans.wge(lake,phi.tr = 1)
aic5.wge(diffLake)
diffLake <- artrans.wge(lake,phi.tr = c(1, 0, 0, 0, 1)
)
diffLake <- artrans.wge(lake,phi.tr = c(0, 1)
)
aic5.wge(diffLake)
data("airline")
library(tswge)
data("airline")
air <- airline
plotts.wge(air)
logair <- log(air)
plotts.wge(logair)
fore <- fore.aruma.wge(logair, phi = c(-.36, -.05, -.14, -.11, .04, .09, -.02, .02, .17, .03, -.1, -.38), d = 1, s = 12)
fore$resid
acf(fore$resid)
ljung.wge(fore$resid, p = 12, q = 0)
ljung.wge(fore$resid, p = 0, q = 0)
data(airlog) # load from tswge package
airlog1 = artrans.wge(airlog,phi.tr=1)
airlog1.12 = artrans.wge(airlog1,phi.tr = c(rep(0,11),1))
ww = est.ar.wge(airlog1.12,p = 12)
ljung.wge(ww$res)
library(tswge)
sunspot <- data(""sunspot.classic"")
sunspot <- data(""sunspot.classic")
sunspot <- data(sunspot.classic")
sunspot <- data("sunspot.classic")
sunspot
sunspot <- sunspot.classic
plotts.sample.wge(sunspot)
pacf(sunspot)
aic5.wge(sunspot, p = 0:10, q = 0)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tswge)
data("sunspot.month")
library(tswge)
plotts.wge(sunspot.month)
plotts.wge(sunspot.month[2000:2100])
plotts.wge(sunspot.month[2000:2132])
plotts.wge(sunspot.month[2012:2144])
plotts.wge(sunspot.month[2024:2156])
plotts.wge(sunspot.month[2024:2160])
plotts.wge(sunspot.month[2024:2180])
plotts.wge(sunspot.month[2024:2156])
par(mfrow(2))
par(mfrow = c(1,2))
plotts.wge(sunspot.month[2024:2156])
plotts.wge(sunspot.month[2024:2156])
par(mfrow = c(0,2))
par(mfrow = c(1,2))
plotts.wge(sunspot.month[2024:2156])
plotts.wge(sunspot.month[2156:2288])
plotts.wge(sunspot.month[2090:2222])
par(mfrow = c(2,2))
plotts.wge(sunspot.month[2156:2288])
acf(sunspot.month[2090:2222])
par(mfrow = c(2,2))
plotts.wge(sunspot.month[2156:2288])
plotts.wge(sunspot.month[2090:2222])
acf(sunspot.month[2156:2288])
acf(sunspot.month[2090:2222])
```{r cond3, fig.keep = 'last'}
par(mfrow = c(2,2))
plotts.wge(sunspot.month[2156:2288])
plotts.wge(sunspot.month[2090:2222])
acf(sunspot.month[2156:2288])
acf(sunspot.month[2090:2222])
layout(t(1:2))
plotts.wge(sunspot.month[2156:2288])
plotts.wge(sunspot.month[2090:2222])
acf(sunspot.month[2156:2288])
acf(sunspot.month[2090:2222])
library(RMySQL)
aws = dbConnect(MySQL(), user='admin', password='expandtheboxscore', dbname='new_xtb_cfb',
host='database-1.chaj45z3rtec.us-east-2.rds.amazonaws.com')
query = dbSendQuery(aws, "select * from new_xtb_cfb.games")
playbyplay2019 = fetch(query, n=-1)
write.csv(playbyplay2019, paste0("../data/gameIDs",Sys.Date(),"_", format(Sys.time(), "%h%m%s"), ".csv"), row.names = FALSE)
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
library(RMySQL)
aws = dbConnect(MySQL(), user='admin', password='expandtheboxscore', dbname='new_xtb_cfb',
host='database-1.chaj45z3rtec.us-east-2.rds.amazonaws.com')
query = dbSendQuery(aws, "select * from new_xtb_cfb.games")
playbyplay2019 = fetch(query, n=-1)
write.csv(playbyplay2019, paste0("../data/gameIDs",Sys.Date(),"_", format(Sys.time(), "%h%m%s"), ".csv"), row.names = FALSE)
setwd("E:/Users/Morgan/Desktop/XTB/CFB")
write.csv(playbyplay2019, paste0("../data/gameIDs",Sys.Date(),"_", format(Sys.time(), "%h%m%s"), ".csv"), row.names = FALSE)
lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
url <- "https://www.espn.com/college-football/stats/player/_/view/offense/table/passing/sort/passingYards/dir/desc"
connection <- html_session(url)
library(rvest)
library(stringr)
url <- "https://www.espn.com/college-football/stats/player/_/view/offense/table/passing/sort/passingYards/dir/desc"
connection <- html_session(url)
players <- connection %>%
html_nodes("[class='flex']")
players
players <- connection %>%
html_nodes("[class='flex']") %>%
html_text()
players
players[1]
players <- connection %>%
html_nodes("[class='flex']") %>%
html_table()
players <- connection %>%
html_nodes("[class='Table Table--align-right Table--fixed Table--fixed-left']") %>%
html_table()
players
players <- connection %>%
html_nodes("[class='AnchorLink']") %>%
html_text()
players
install.packages('rselenium')
install.packages('RSelenium')
library(RSelenium)
connection <- html_sesssion("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000")
connection <- html_session("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000")
json_text <- html_text(connection)
connection <- html_session("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000") %>%
json_text <- html_nodes(connection, 'body')
connection <- read_html("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000") %>%
json_text <- html_nodes(connection, 'body')
connection <- get("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000") %>%
json_text <- html_nodes(connection, 'body')
connection <- get("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000") %>%
json_text <- html_nodes(connection, 'body')
connection <- get("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000")
library(httr)
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000")
connection
install.packages('jsonlite')
library(jsonlite)
reponse_text <- content(connection, as='text')
df <- fromJSON(response_text)
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
head(df)
df$athletes
df$athletes$athlete$id
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=10000")
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=1000")
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
connection$url
connection$content
library(httr)
library(jsonlite)
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=1000")
response_text <- content(connection, as='text')
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=1000", timeout(30))
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
df$athletes$athlete$displayName
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=2000", timeout(30))
response_text <- content(connection, as='text')
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=2000", timeout(30))
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
df$athletes$athlete$displayName
connection <- GET("http://site.api.espn.com/apis/common/v3/sports/football/college-football/statistics/byathlete?category=offense%3Apassing&conference=80&contentorigin=espn&isqualified=false&lang=en&region=us&sort=passing.passingYards%3Adesc&limit=1000", timeout(30))
df$athletes$athlete$displayName
response_text <- content(connection, as='text')
df <- fromJSON(response_text)
df$athletes$athlete$displayName
out$playerIDs <- df$athletes$athlete$id
df$athletes$athlete$id
df$athletes$athlete$headshot$href
out$names <- df$athletes$athlete$displayName
out <- data.frame()
out$names <- df$athletes$athlete$displayName
out$playerIDs <- df$athletes$athlete$id
out$playerPictureLink <- df$athletes$athlete$headshot$href
out <- data.frame(names <- df$athletes$athlete$displayName,
playerIDs <- df$athletes$athlete$id,
playerPictureLink <- df$athletes$athlete$headshot$href)
head(out)
head(out)
out <- data.frame(names <- df$athletes$athlete$displayName,
playerIDs <- df$athletes$athlete$id,
playerPictureLink <- df$athletes$athlete$headshot$href,
)
colnames(out) <- c("name", "playerID", "playerPictureLink")
head(out)
for(player in df){
print(player$name)
}
df[1, "name"]
df[1]
out[1]
out["name", 1]
out["name", 2]
out["name", 3]
out[1]["name"]
out[1][1]
out[1][1][1]
out[,1]
out[1,]
out[1,"name"]
print(out[1,"name"])
names <- as.character(df$athletes$athlete$displayName)
out <- data.frame(names <- df$athletes$athlete$displayName,
playerIDs <- df$athletes$athlete$id,
playerPictureLink <- df$athletes$athlete$headshot$href,
)
out <- data.frame(names <- df$athletes$athlete$displayName,
playerIDs <- df$athletes$athlete$id,
playerPictureLink <- df$athletes$athlete$headshot$href
)
print(out[1,"name"])
print(out[2,"name"])
names
colnames(out) <- c("name", "playerID", "playerPictureLink")
print(out[2,"name"])
length(out)
rows(out)
nrows(out)
nrow(out)
1:nrow(out)
out$playerPictureLink[1]
out$playerPictureLink[2]
for(i in 1:nrow(out)){
download.file(out$playerPictureLink[i], destfile = paste("/pics/", out$name[i], ".png", sep = ""), method="curl", extra="-k")
}
as.character(out$playerPictureLink[1])
for(i in 1:nrow(out)){
download.file(as.character(out$playerPictureLink[i]), destfile = paste("/pics/", out$name[i], ".png", sep = ""), method="curl", extra="-k")
}
for(i in 1:nrow(out)){
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method="curl", extra="-k", quiet = TRUE)
}
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method="curl", quiet = TRUE)
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), quiet = TRUE)
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), quiet = TRUE, mode = "wb")
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method = "libcurl", quiet = TRUE, mode = "wb")
for(i in 1:nrow(out)){
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method = "libcurl", quiet = TRUE, mode = "wb")
}
for(i in 1:nrow(out)){
tryCatch(
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method = "libcurl", quiet = TRUE, mode = "wb"),
print(paste("No picture found for:", out$name[i])))
}
is.na(out$playerPictureLink)
for(i in 1:nrow(out)){
if(!is.na(out$playerPictureLink[i])){
download.file(as.character(out$playerPictureLink[i]), destfile = paste("../data/pics/", out$name[i], ".png", sep = ""), method = "libcurl", quiet = TRUE, mode = "wb")
}
}
getwd()
file.exists("../data/pics")
